#!/usr/bin/python3

# --- BEGIN COPYRIGHT BLOCK ---
# Copyright (C) 2020 Simon Pichugin <simon.pichugin@gmail.com>
# All rights reserved.
#
# License: GPL (version 3 or any later version).
# See LICENSE for details.
# --- END COPYRIGHT BLOCK ---
#
# PYTHON_ARGCOMPLETE_OK

import logging
import argparse
import argcomplete
import sys
import signal
import patogith

parser = argparse.ArgumentParser()
parser.add_argument(
    "-v",
    "--verbose",
    help="Display verbose operation tracing during command execution",
    action="store_true",
    default=False,
)
parser.add_argument(
    "-i",
    "--issues-file",
    help="File path to store issues info (needed for Stage 2 and Stage 3",
)
parser.add_argument(
    "-g",
    "--github-repo",
    type=str,
    help="GitHub repo in a format user/repo-name (droideck/389-ds-base)",
)
parser.add_argument(
    "-p",
    "--pagure-repo",
    type=str,
    nargs="?",
    help="Pagure repo in a format user/repo-name (droideck/389-ds-base)",
)

subcommands = parser.add_subparsers(help="action")
create_gh_parser = subcommands.add_parser(
    "create-gh-issues", help="Create GitHub issues using Pagure info"
)
create_gh_parser.set_defaults(func=patogith.copy_issues)
update_pagure_parser = subcommands.add_parser(
    "update-pagure", help="Update Pagure issues"
)
update_pagure_parser.set_defaults(func=patogith.update_pagure_issues)
update_bz_parser = subcommands.add_parser("update-bugzillas", help="Update Bugzillas")
update_bz_parser.set_defaults(func=patogith.update_bugzillas)

update_bz_parser = subcommands.add_parser(
    "close-unused-milestones", help="Close Unused Milestones"
)
update_bz_parser.set_defaults(func=patogith.close_unused_milestones)

argcomplete.autocomplete(parser)


# handle a control-c gracefully
def signal_handler(signal, frame):
    print("\n\nExiting...")
    sys.exit(0)


if __name__ == "__main__":
    root = logging.getLogger()
    log = logging.getLogger("patogith")
    log_handler = logging.StreamHandler(sys.stdout)

    args = parser.parse_args()
    if args.verbose:
        log.setLevel(logging.DEBUG)
        log_format = "%(levelname)s: %(message)s"
    else:
        log.setLevel(logging.INFO)
        log_format = "%(message)s"
    log_handler.setFormatter(logging.Formatter(log_format))
    root.addHandler(log_handler)

    log.debug("Pagure to Github Migration Tool")
    log.debug("Called with: %s" % args)

    if not args.verbose:
        signal.signal(signal.SIGINT, signal_handler)

    if args.func:
        args.func(args, log)
